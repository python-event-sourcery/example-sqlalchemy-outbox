[tool.poetry]
name = "pyes-example-sqlalchemy-outbox"
version = "0.1.0"
description = "Example usage of python Event Sourcery framework with SQLAlchemy outbox subsbscription backend."
authors = ["Łukasz Żukowski <lukasz.zukowski@gmail.com>"]
readme = "README.md"
packages = [{include = "*", from="src"}]

[tool.poetry.dependencies]
python = "^3.12"
python-event-sourcery = {version = "*", extras = ["sqlalchemy"], allow-prereleases = true}
fastapi = "^0.114.0"

[tool.poetry.group.dev.dependencies]
ruff = "*"
mypy = "^1.10.0"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
httpx = "^0.27.2"

[tool.pytest]
addopts = ""

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "pass",
    "\\.\\.\\.",
    "NotImplementedError",
    "__repr__",
    "__str__",
    "TYPE_CHECKING",
]

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true
enable_incomplete_feature = ["NewGenericSyntax"]

[tool.ruff]
line-length = 88
target-version = "py312"
show-fixes = true

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "C",  # Convention
    "E",  # Error
    "F",  # Pyflakes
    "G",  # flake8-logging-format
    "I",  # isort
    "N",  # pep8-naming
    "Q",  # flake8-quotes
    "S",  # flake8-bandit
    "W",  # Warning
    "PL",  # Pylint
    "UP",  # pyupgrade
    "RUF",  # Ruff-specific rules
]
ignore = [
    "N818",  # error-suffix-on-exception-name
    "PLR2004",  # magic-value-comparison
    "B008",  # function-call-in-default-argument
]

[tool.ruff.lint.per-file-ignores]
"src/tests.py" = [
    "S101",  # Use of assert detected
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
